---
- hosts: 'all'
  vars:
    bin: '{{ ansible_env.PWD }}/apps/bin'
    install: '{{ ansible_env.PWD }}/install'
    cellar: '/home/linuxbrew/.linuxbrew/Cellar'
    config: '{{ ansible_env.PWD }}/config'
  tasks:
  - name: 'apt: update'
    apt: {update_cache: true}
    become: true

  - name: 'apt: install'
    apt:
      name:
      - 'ssh-askpass'
      - 'browser-plugin-freshplayer-pepperflash'
      state: 'latest'
    become: true

  - name: 'docker: dependencies'
    apt:
      name:
      - 'apt-transport-https'
      - 'ca-certificates'
      - 'curl'
      - 'software-properties-common'
      state: 'latest'
    become: true
  - name: 'docker: key'
    apt_key:
      url: 'https://download.docker.com/linux/ubuntu/gpg'
      id: '9DC858229FC7DD38854AE2D88D81803C0EBFCD88'
    become: true
  - name: 'docker: repository'
    apt_repository:
      repo: 'deb [arch=amd64] https://download.docker.com/linux/ubuntu disco stable'
      update_cache: true
    become: true
  - name: 'docker'
    apt:
      name: 'docker-ce'
      state: 'latest'
    become: true
  - name: 'docker: docker-compose'
    shell: '{{ install }}/docker-compose.bash'
    register: 'docker_compose_shell'
    changed_when: '"already installed" not in docker_compose_shell.stdout'
  - name: 'docker: permission'
    user:
      name: '{{ ansible_user_id }}'
      groups: ['docker']
      append: true
    become: true

  - name: 'atom: key'
    apt_key: {url: 'https://packagecloud.io/AtomEditor/atom/gpgkey'}
    become: true
  - name: 'atom: repository'
    apt_repository:
      repo: 'deb [arch=amd64] https://packagecloud.io/AtomEditor/atom/any/ any main'
      update_cache: true
    become: true
  - name: 'atom'
    apt:
      name: 'atom'
      state: 'latest'
    become: true

  - name: 'vscode: key'
    apt_key:
      url: 'https://packages.microsoft.com/keys/microsoft.asc'
      keyring: '/usr/share/keyrings/packages.microsoft.gpg'
    become: true
  - name: 'vscode: repository'
    apt_repository:
      repo: 'deb [arch=amd64 signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main'
      filename: 'vscode'
      update_cache: true
    become: true
  - name: 'vscode'
    apt:
      name: 'code'
      state: 'latest'
    become: true

  - name: 'slack'
    apt: {deb: 'https://downloads.slack-edge.com/linux_releases/slack-desktop-4.3.2-amd64.deb'}
    become: true

  - name: 'zoom'
    apt: {deb: 'https://zoom.us/client/latest/zoom_amd64.deb'}
    become: true

  - name: 'brew: install'
    homebrew:
      name:
      - 'gcc'
      - 'jq'
      - 'awscli'
      - 'ansible'
      - 'neovim'
      - 'shellcheck'
      - 'tmux'
#      - 'ripgrep'
      - 'bat'
      - 'go'
      - 'rustup-init'
      - 'lua'
      - 'luarocks'
      - 'direnv'
      - 'fish'
      - 'bats'
      state: 'latest'

  - name: 'fish: oh-my-fish'
    shell: '{{ install }}/omf.bash'
    register: 'fish_omf_shell'
    changed_when: '"already installed" not in fish_omf_shell.stdout'
  - name: 'fish: oh-my-fish update'
    shell: 'omf update'
    args: {executable: 'fish'}
    register: 'fish_omf_update_shell'
    changed_when: '"already up-to-date" not in fish_omf_update_shell.stdout'
  - name: 'fish: oh-my-fish plugins'
    shell: 'omf install {{ item }}'
    args: {executable: 'fish'}
    register: 'fish_omf_install_shell'
    changed_when: '"already installed" not in fish_omf_install_shell.stderr'
    with_items: ['clearance', 'bass']
  - name: 'fish: shells'
    lineinfile:
      path: '/etc/shells'
      line: '/home/linuxbrew/.linuxbrew/bin/fish'
    become: true
  - name: 'fish: default shell'
    user:
      name: '{{ ansible_user_id }}'
      shell: '/home/linuxbrew/.linuxbrew/bin/fish'
    become: true

  - name: '1password-cli'
    shell: '{{ install }}/1password-cli.bash'
    register: 'op_shell'
    changed_when: '"already installed" not in op_shell.stdout'

  - name: 'goland'
    shell: '{{ install }}/goland.bash'
    register: 'goland_shell'
    changed_when: '"already installed" not in goland_shell.stdout'

  - name: 'golangci-lint'
    shell: '{{ install }}/golangci-lint.bash'
    register: 'golangci_lint_shell'
    changed_when: '"already installed" not in golangci_lint_shell.stdout'

  - name: 'spotify: key'
    apt_key: {url: 'https://download.spotify.com/debian/pubkey.gpg'}
    become: true
  - name: 'spotify: repository'
    apt_repository:
      repo: 'deb http://repository.spotify.com stable non-free'
      update_cache: true
    become: true
  - name: 'spotify'
    apt:
      name: 'spotify-client'
      state: 'latest'
    become: true

  - name: 'env: bash'
    lineinfile:
      path: '~/.bashrc'
      line: '{{ item }}'
    with_items:
    - 'export PATH="{{ bin }}:${PATH}"'
    - 'export PATH="/home/linuxbrew/.linuxbrew/bin:${PATH}"'
    - 'export EDITOR="nvim"'
    - 'export GOROOT="{{ cellar }}/go/$( go version | grep -o "1\.\d+(\.\d+)?" )/libexec"'
    - 'export GOPATH="${HOME}/go"'
    - 'export PATH="${GOPATH}/bin:${PATH}"'
    - 'eval "$( direnv hook bash )"'
    - 'source "{{ config }}/.bashrc-extra"'
  - name: 'env: fish'
    lineinfile:
      path: '~/.config/fish/config.fish'
      line: '{{ item }}'
      create: true
    with_items:
    - 'set PATH {{ bin }} $PATH'
    - 'set PATH /home/linuxbrew/.linuxbrew/bin $PATH'
    - 'set -Ux EDITOR nvim'
    - 'set -Ux GOROOT {{ cellar }}/go/(go version | grep -o "1\.\d+(\.\d+)?")/libexec'
    - 'set -Ux GOPATH $HOME/go'
    - 'set PATH $GOPATH/bin $PATH'
    - 'direnv hook fish | source'
    - 'source {{ config }}/config-extra.fish'
    
  - name: 'git: config'
    ini_file:
      path: '~/.gitconfig'
      create: true
      section: 'include'
      option: 'path'
      value: '{{ config }}/.gitconfig'

  - name: 'nvim: dependencies'
    pip:
      name: 'neovim'
      executable: 'pip3'
  - name: 'nvim: config dir'
    file:
      path: '~/.config/nvim'
      state: 'directory'
      mode: '0755'
  - name: 'nvim: config'
    file:
      src: '{{ config }}/init.vim'
      dest: '~/.config/nvim/init.vim'
      state: 'link'
